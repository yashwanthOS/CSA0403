#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define SIZE 5

int buffer[SIZE];
int in = 0, out = 0;

sem_t empty, full, mutex;

void *producer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100;  // Produce an item

        sem_wait(&empty);     // Wait for empty slot
        sem_wait(&mutex);     // Enter critical section

        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % SIZE;

        sem_post(&mutex);     // Leave critical section
        sem_post(&full);      // Increase count of full slots

        sleep(1);
    }

    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);      // Wait for available item
        sem_wait(&mutex);     // Enter critical section

        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % SIZE;

        sem_post(&mutex);     // Leave critical section
        sem_post(&empty);     // Increase count of empty slots

        sleep(2);
    }

    pthread_exit(NULL);
}

int main() {
    pthread_t prod, cons;

    sem_init(&empty, 0, SIZE);  // SIZE empty slots initially
    sem_init(&full, 0, 0);      // No items initially
    sem_init(&mutex, 0, 1);     // Binary semaphore for mutex

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
