#include <stdio.h>

#define MAX 100

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int priority;
    int completion_time;
    int waiting_time;
    int turnaround_time;
    int is_completed;
} Process;

int main() {
    Process p[MAX];
    int n, i, time = 0, completed = 0;
    int min_priority, current = -1;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    // Input process details
    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time, burst time and priority for P%d: ", i + 1);
        scanf("%d%d%d", &p[i].arrival_time, &p[i].burst_time, &p[i].priority);
        p[i].remaining_time = p[i].burst_time;
        p[i].is_completed = 0;
    }

    printf("\nGantt Chart:\n");

    // Time simulation loop
    while (completed < n) {
        min_priority = 9999;
        current = -1;

        // Find process with highest priority (lowest number) that's ready
        for (i = 0; i < n; i++) {
            if (p[i].arrival_time <= time && !p[i].is_completed && p[i].remaining_time > 0) {
                if (p[i].priority < min_priority || 
                   (p[i].priority == min_priority && p[i].arrival_time < p[current].arrival_time)) {
                    min_priority = p[i].priority;
                    current = i;
                }
            }
        }

        if (current != -1) {
            printf("| P%d ", p[current].pid);
            p[current].remaining_time--;
            time++;

            // Process completed
            if (p[current].remaining_time == 0) {
                p[current].completion_time = time;
                p[current].turnaround_time = p[current].completion_time - p[current].arrival_time;
                p[current].waiting_time = p[current].turnaround_time - p[current].burst_time;
                p[current].is_completed = 1;
                completed++;
            }
        } else {
            // No process is ready
            printf("| Idle ");
            time++;
        }
    }
    printf("|\n");

    // Display process table
    float avg_wait = 0, avg_turn = 0;
    printf("\nProcess\tAT\tBT\tP\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n", 
               p[i].pid, p[i].arrival_time, p[i].burst_time, p[i].priority,
               p[i].completion_time, p[i].turnaround_time, p[i].waiting_time);
        avg_wait += p[i].waiting_time;
        avg_turn += p[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f", avg_wait / n);
    printf("\nAverage Turnaround Time: %.2f\n", avg_turn / n);

    return 0;
}
