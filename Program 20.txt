#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t wrt;         // Semaphore for writer
pthread_mutex_t mutex;  // Mutex for read count access

int readcount = 0; // Number of readers currently reading
int data = 0;      // Shared resource

void *reader(void *arg) {
    int f = *((int *)arg);

    pthread_mutex_lock(&mutex);
    readcount++;
    if (readcount == 1)
        sem_wait(&wrt);  // First reader locks the writer
    pthread_mutex_unlock(&mutex);

    printf("Reader %d: read data = %d\n", f, data);
    sleep(1);

    pthread_mutex_lock(&mutex);
    readcount--;
    if (readcount == 0)
        sem_post(&wrt);  // Last reader releases the writer
    pthread_mutex_unlock(&mutex);

    pthread_exit(NULL);
}

void *writer(void *arg) {
    int f = *((int *)arg);

    sem_wait(&wrt);  // Wait for access to shared resource

    data++;
    printf("Writer %d: wrote data = %d\n", f, data);
    sleep(2);

    sem_post(&wrt);  // Release access

    pthread_exit(NULL);
}

int main() {
    pthread_t r[5], w[5];
    int ids[5];

    sem_init(&wrt, 0, 1);
    pthread_mutex_init(&mutex, NULL);

    // Create reader and writer threads
    for (int i = 0; i < 5; i++) {
        ids[i] = i + 1;
        pthread_create(&w[i], NULL, writer, &ids[i]);
        pthread_create(&r[i], NULL, reader, &ids[i]);
    }

    // Join threads
    for (int i = 0; i < 5; i++) {
        pthread_join(w[i], NULL);
        pthread_join(r[i], NULL);
    }

    sem_destroy(&wrt);
    pthread_mutex_destroy(&mutex);

    return 0;
}
