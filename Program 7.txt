#include <stdio.h>

#define MAX 100

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int is_completed;
} Process;

int main() {
    Process p[MAX];
    int n, i, current_time = 0, completed = 0;
    int min_index;
    float avg_turnaround = 0, avg_waiting = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    // Input arrival and burst times
    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time and burst time for P%d: ", p[i].pid);
        scanf("%d%d", &p[i].arrival_time, &p[i].burst_time);
        p[i].is_completed = 0;
    }

    printf("\nGantt Chart:\n");

    while (completed < n) {
        min_index = -1;
        int min_bt = 9999;

        // Find the process with shortest burst time among arrived processes
        for (i = 0; i < n; i++) {
            if (p[i].arrival_time <= current_time && !p[i].is_completed) {
                if (p[i].burst_time < min_bt) {
                    min_bt = p[i].burst_time;
                    min_index = i;
                } else if (p[i].burst_time == min_bt) {
                    // Tie-breaker: earlier arrival time
                    if (p[i].arrival_time < p[min_index].arrival_time) {
                        min_index = i;
                    }
                }
            }
        }

        if (min_index == -1) {
            printf("| Idle ");
            current_time++;
        } else {
            Process *proc = &p[min_index];
            proc->completion_time = current_time + proc->burst_time;
            proc->turnaround_time = proc->completion_time - proc->arrival_time;
            proc->waiting_time = proc->turnaround_time - proc->burst_time;
            proc->is_completed = 1;
            current_time = proc->completion_time;
            completed++;

            avg_turnaround += proc->turnaround_time;
            avg_waiting += proc->waiting_time;

            printf("| P%d ", proc->pid);
        }
    }
    printf("|\n");

    // Print table
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid,
               p[i].arrival_time,
               p[i].burst_time,
               p[i].completion_time,
               p[i].turnaround_time,
               p[i].waiting_time);
    }

    printf("\nAverage Turnaround Time: %.2f", avg_turnaround / n);
    printf("\nAverage Waiting Time: %.2f\n", avg_waiting / n);

    return 0;
}
