#include <stdio.h>
#include <stdlib.h>

// Function to compare integers for qsort (ascending order)
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

void SCAN(int requests[], int n, int head, int disk_size, char direction[]) {
    int total_movement = 0;
    int i, j;

    // Sort the request queue
    qsort(requests, n, sizeof(int), compare);

    // Split the requests into two parts: less than head and greater than head
    int left[100], right[100];
    int left_count = 0, right_count = 0;

    for (i = 0; i < n; i++) {
        if (requests[i] < head)
            left[left_count++] = requests[i];
        else
            right[right_count++] = requests[i];
    }

    printf("Disk Head Movement:\nStart at: %d\n", head);

    if (strcmp(direction, "left") == 0) {
        // Move left
        for (i = left_count - 1; i >= 0; i--) {
            printf("Move from %d to %d, Distance = %d\n", head, left[i], abs(head - left[i]));
            total_movement += abs(head - left[i]);
            head = left[i];
        }
        // Hit the end (0)
        if (head != 0) {
            printf("Move from %d to 0, Distance = %d\n", head, head);
            total_movement += head;
            head = 0;
        }
        // Now move right
        for (i = 0; i < right_count; i++) {
            printf("Move from %d to %d, Distance = %d\n", head, right[i], abs(head - right[i]));
            total_movement += abs(head - right[i]);
            head = right[i];
        }
    } else {
        // Move right
        for (i = 0; i < right_count; i++) {
            printf("Move from %d to %d, Distance = %d\n", head, right[i], abs(head - right[i]));
            total_movement += abs(head - right[i]);
            head = right[i];
        }
        // Hit the end (disk_size - 1)
        if (head != disk_size - 1) {
            printf("Move from %d to %d, Distance = %d\n", head, disk_size - 1, abs(head - (disk_size - 1)));
            total_movement += abs(head - (disk_size - 1));
            head = disk_size - 1;
        }
        // Now move left
        for (i = left_count - 1; i >= 0; i--) {
            printf("Move from %d to %d, Distance = %d\n", head, left[i], abs(head - left[i]));
            total_movement += abs(head - left[i]);
            head = left[i];
        }
    }

    printf("\nTotal Head Movement = %d cylinders\n", total_movement);
}

int main() {
    int n, head, disk_size;
    char direction[10];

    printf("Enter total number of disk requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the disk request queue:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter total disk size (number of cylinders): ");
    scanf("%d", &disk_size);

    printf("Enter the initial direction (left/right): ");
    scanf("%s", direction);

    SCAN(requests, n, head, disk_size, direction);

    return 0;
}
